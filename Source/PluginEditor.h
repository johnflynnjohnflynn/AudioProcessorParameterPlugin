/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"


//==============================================================================
// This is a handy slider subclass that controls an AudioProcessorParameter
// (may move this class into the library itself at some point in the future..)
class ParameterSlider   : public Slider,
                                                                           private Timer
{
public:
    ParameterSlider (AudioProcessorParameter& p)
        : Slider (p.getName (256)), param (p)
    {
        setRange (0.0, 1.0, 0.0);
        startTimerHz (30);
        updateSliderPos();
    }

    void valueChanged() override
    {
        param.setValueNotifyingHost ((float) Slider::getValue());
    }

    void timerCallback() override       { updateSliderPos(); }

    void startedDragging() override     { param.beginChangeGesture(); }
    void stoppedDragging() override     { param.endChangeGesture();   }

    double getValueFromText (const String& text) override   { return param.getValueForText (text); }
    String getTextFromValue (double value) override         { return param.getText ((float) value, 1024); }

    void updateSliderPos()
    {
        const float newValue = param.getValue();

        if (newValue != (float) Slider::getValue() && ! isMouseButtonDown())
            Slider::setValue (newValue);
    }

    AudioProcessorParameter& param;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ParameterSlider)
};

//==============================================================================
/**
*/
class AudioProcessParameterPluginAudioProcessorEditor  : public AudioProcessorEditor
{
public:
    AudioProcessParameterPluginAudioProcessorEditor (AudioProcessParameterPluginAudioProcessor&);
    ~AudioProcessParameterPluginAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;

private:
    enum SymbolicIndexNames     // Use symbolic names instead of            // better way?
    {                           // managedParameters index numbers.
        boolName,               // Must have the same ordering as
        floatName,              // processor's managedParameters.
        intName
    };

    Label boolLabel_;
    Label floatLabel_;
    Label intLabel_;
    ParameterSlider boolSlider_;
    ParameterSlider floatSlider_;
    ParameterSlider intSlider_;

    // This reference is provided as a quick way for your editor to
    // access the processor object that created it.
    AudioProcessParameterPluginAudioProcessor& processor;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AudioProcessParameterPluginAudioProcessorEditor)
};


#endif  // PLUGINEDITOR_H_INCLUDED
